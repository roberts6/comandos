const express = require("express");
// después de haber generado un proyecto con npm init -y y luego haber instalado express mediante npm install express --save
// ahora lo que hicimos es generar una variable que ejecute express

const app = express();
// esta variable constante lo que hace es ejecutar express

const public =path.resolve(__dirname,'./public');
app.use(express.static('public')); 
OTRA FORMA DE ESCRIBIRLO SERÍA: app.use(express.static(path.resolve(__dirname,'./public'));
//aquí lo que vamos a indicar es que sirva imégenes, archivos CSS, y archivos JavaScript desde un directorio nombrado 'public'. Si no hacemos esta acción no vamos a poder acceder a ningún archivo dentro de la carpeta 'public'

//console.log(app);


app.listen(3000, () => console.log("El proceso fue exitoso"));
// este método pone a correr el servidor. Primero vamos a indicar el puerto y luego, de forma optativa, una función.
// para probar puedo entrar al navegador y tipear localhost:3000

/*usandoExpress.get("/", function(req, res){
res.send("Bienvenido Oscar");
});*/

app.get("/contacto", function(req, res){
    res.send("Nuestra direcciÃ³n de correo es: ...");
    });

    app.get("/un-array", function(req, res){
        res.send([1,2,3,4]);
        });


        app.get("/un-objeto", function(req, res){
            res.send({name: "Oscar"});
            });

// app.get lo que hace es montar una ruta que responde a la petición del cliente. Por ejemplo "/" dirige a la raiz de nuestro sitio, "/contacto" a la página de contacto y así sucesivamente.
// el segundo parámetro es agregar una función. Esta lo que va a hacer es accionar una consecuencia al pedido del cliente.


/* este es un ejemplo de cómo podría enviar una variable que consta de un objeto con propiedades

const express = require('express');
const app = express();

let producto = ({tipoProducto: null, precio: null, cantidad: null});

app.get("/producto/agregar",function (req,res){
    res.send(producto);
}); */

// res.send() no es lo más adecuado si queremos enviar alguna estructura más compleja, por esta razón express nos provee de res.sendFile(aquí va la ruta de donde se encuentra el archivo que queremos subir. Ej: )

const path = require ('path');

usandoExpress.get("/", function(req, res){
    res.sendFile(path.join(__dirname, "./index.html")
    )});
//el ejemplo anterior es CLAVE para entender cómo llamar desde js un archivo html. Esta parte res.sendFile(path.join(__dirname, "la ruta del archivo") 




RESUMEN --->

-> npm init
-> npm install --save express

const express = require("express");
const app = express();
const path = require("path");

app.use('/static', express.static(__dirname + '/public'));

const publicPath = path.resolve(__dirname, "./mercado-liebre");

app.listen(3666, () => console.log("Funcionando en el puerto 3666"));

app.get("/", function(req, res){
    res.sendFile(path.join(__dirname, "views/index.html")
    )});



PARA INSTALAR NODEMON (ayuda a no tener que frenar el proceso y volver a comenzarlo cada vez que haga un cambio. Es la forma manual de usar por ejemplo la extensión GoLive)

-> npm i -D nodemon

Luego ir a package.json y escribir entre “scripts” y “tests” el comando “start”: “nodemon app.js”;
Por último en la terminal comentamos npm start y ya debería funcionar
